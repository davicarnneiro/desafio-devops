name: CI/CD para DOCKERHUB e Kubernetes AWS

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  CI:
    name: Build and Push image Dockerhub
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
    - name: Obtendo o código
      uses: actions/checkout@v3
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{secrets.DOCKERHUB_USER}}
        password: ${{secrets.DOCKERHUB_PASS}}
    - name: Construção da imagem Docker worker
      uses: docker/build-push-action@v5.0.0
      with: 
        context: ./
        file: ./Dockerfile
        push: true
        tags: |
          davicarneiro/comentarios-api:${{github.run_number}}
          davicarneiro/comentarios-api:latest
          
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.16.1
      with:
        image-ref: davicarneiro/comentarios-api:${{github.run_number}}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: 0
        severity: UNKNOWN,CRITICAL,HIGH,MEDIUM,LOW

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  CD:
    name: Deploy no Kubernetes
    runs-on: ubuntu-latest
    needs: CI

    steps:
     - name: Checkout Código
       uses: actions/checkout@v2

     - name: Configurar as credenciais da AWS
       run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}          
  
     - name: Fazer o deploy no Kubernetes
       run: |
          aws eks --region us-west-1 update-kubeconfig --name devops-eks
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml

# name: Docker Build and Deploy

# on:
#   push:
#     branches:
#       - main  # Defina a branch que deseja monitorar para push
#   pull_request:
#     branches:
#       - main  # Defina a branch que deseja monitorar para pull request

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Login to Docker Hub
#       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#     - name: Build Docker image
#       run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/comentarios:latest .

#     - name: Push Docker image
#       run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/comentarios:latest

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     - name: Login to Docker Hub
#       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#     - name: Pull Docker image
#       run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/comentarios:latest

#     - name: Deploy to EC2
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ${{ secrets.EC2_USERNAME }}
#         key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#         script: |
#           docker stop comentarios || true
#           docker rm comentarios || true
#           docker run -td --name comentarios --restart always -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/comentarios:latest
